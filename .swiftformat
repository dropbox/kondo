# MEP 26 - Swift Formatting
# https://paper.dropbox.com/doc/MEP-26-Swift-Formatting--AbmEIStzGfYSyzicLvfmvn9SAg-uhY3NxdhNZzZXgZWV6qxi
# FYI: the clang-format equivalent of this file is in xplat root, because clang-format can't be told where
# The pinning for swift-format is controlled in tools/setup/dev_setup.py

# TODO: can we get this from Xcode automatically?
--swiftversion 5.6

# Which column number to begin wrapping text at
--maxwidth 160
# Matches our existing whitespace standards for Objective-C
--trimwhitespace always
# Forces 0xABCD to be 0xabcd
--hexliteralcase lowercase 
# Semicolons should be a compile error, but we'll be satisfied by removing them
--semicolons never 
# Cleans up unused args
--stripunusedargs closure-only 
# e.g., turns things from 100000 to 100_000, does not stop you from doing 100 * 1000
--decimalgrouping 3 
# We do not allow this rule because RxSwift has some potentially-ambiguous trailing
# closures and we do not want to force trailing closures
--disable trailingClosures
# We do not want to _require_ `case let .case(arg)` over `case .case(let arg)`
--disable hoistPatternLet
# Always put multiple lines of arguments/values on new lines
# for example:
# func someName(a: String,
#               b: String,
#               c: String)
# to
# func someName(
#   a: String,
#   b: String,
#   c: String
# )
# This is to avoid multiple levels of indentation for function calls, and the need to
# reindent (potentially many) groups of function calls when you change the name.
# This only applies to multi-line function calls or collection creation.
# You can still put multiple arguments in a single function call on a single line.
--wraparguments before-first
--wrapcollections before-first
--wrapparameters before-first
# Places trailing parentheses (like above) on their own line
--closingparen balanced
# Forces `self.` in assignments in init. We decided to do this because
# the argument _for_ using `self.` was convincing for some cases, and consistency
# is more important
# This _also_ forces `self.` to be _REMOVED_ when it is not required
# (e.g., in an escaping closure you must say `self`).
--self init-only
# By default, `&&` is replaced by `,` - we decided this should not be forced
--disable andOperator
# We have existing linters that fight SwiftFormat about terminal newlines
--disable linebreakAtEndOfFile
# The following flag forces spaces around operators, e.g. `3 / 4`, and removes spaces
# from situations like `var property : Type` or `class ClassName : Superclass`
# There's no way to separate these 2, and although we would prefer not to force
# spaces around operators, we decided to keep the rule.
# [decided to keep and not disable] --disable spaceAroundOperators

# this is inverting the defaults, which changed after we had adopted them
--specifierorder public,open,override

# moves declaration acls to the extension, which we do not want
--disable extensionAccessControl
# moves { to new lines when multi-line }
--disable wrapMultilineStatementBraces
# removes `let view: UIView = UIView()`'s type declaration, which we often add for compilation speed
--disable redundantType
# this heuristic fires if a type has no instance methods, which is not always correct in our mental model
--disable enumNamespaces
# we sometimes use redundant closures for readability
--disable redundantClosure
# we sometimes need to include -> Void to disambiguate in RxSwift chains
--disable redundantVoidReturnType
